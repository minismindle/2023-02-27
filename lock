#include "pch.h"
#include <iostream>
#include "CorePch.h"
#include <thread>
#include <atomic>
#include <mutex>
vector<int32> v;

mutex m;

// RAII
template<class T>
class LockGuard
{
public:
	LockGuard(T& m)
	{
		_mutex = &m;
		_mutex->lock();
	}
	~LockGuard()
	{
		_mutex->unlock();
	}
private:
	T* _mutex;
};
void Push()
{
	for (int32 i = 0; i < 10000; i++)
	{
		//lock_guard<mutex> lockguard(m);
		
		//unique_lock<mutex> uniquelock(m, defer_lock);
		
		//uniquelock.lock();

		v.push_back(i);
		
	}
}

int main()
{

	v.reserve(20000);

	thread t1(Push);
	thread t2(Push);

	t1.join();
	t2.join();

	cout << v.size() << endl;
}

